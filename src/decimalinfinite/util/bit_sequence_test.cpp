#include <gtest/gtest.h>

#include "bit_sequence.h"

TEST(BitSequence, BasicOperations)
{
    BitSequence s;

    s.appendBits(0b10, 2);
    ASSERT_EQ("10", s.str());
    ASSERT_EQ(1, s.getBits(0, 1));
    ASSERT_EQ(0b10, s.getBits(0, 2));
    ASSERT_EQ(0b100, s.getBits(0, 3));
    ASSERT_EQ(0, s.getBits(1, 1));
    ASSERT_EQ(0, s.getBits(1, 2));
    ASSERT_EQ(0, s.getBits(1, 3));
    ASSERT_EQ(0, s.getBits(1, 32));

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ("101111111111110", s.str());
    ASSERT_EQ(0b101111111111110, s.getBits(0, 15));
    ASSERT_EQ(0b011111111111100, s.getBits(1, 15));

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ("1011111111111101111111111110", s.str());
    ASSERT_EQ(0b1011111111111101111111111110, s.getBits(0, 28));
    ASSERT_EQ(0b10111111111111011111111111100000, s.getBits(0, 32));

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ("10111111111111011111111111101111111111110", s.str());
    ASSERT_EQ(0b1011111111111101111111111110, s.getBits(0, 28));
    ASSERT_EQ(0b10111111111111011111111111101111, s.getBits(0, 32));
    ASSERT_EQ(0b1111, s.getBits(28, 4));
    ASSERT_EQ(0b1111, s.getBits(29, 4));

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ("101111111111110111111111111011111111111101111111111110",
              s.str());

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "0",
            s.str());

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "01111111111110",
            s.str());

    s.appendBits(0b1111111111110, 13);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "011111111111101111111111110",
            s.str());

    s.appendBits(0b110, 3);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "011111111111101111111111110110",
            s.str());

    s.appendBits(0b1111111111111111111111111111110, 31);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "0111111111111011111111111101101111111111111111111111111111110",
            s.str());

    s.appendBits(0b0, 1);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "01111111111110111111111111011011111111111111111111111111111100",
            s.str());

    s.appendBits(0b1, 1);
    ASSERT_EQ(
            "101111111111110111111111111011111111111101111111111110111111111111"
            "011111111111101111111111110110111111111111111111111111111111001",
            s.str());
}
